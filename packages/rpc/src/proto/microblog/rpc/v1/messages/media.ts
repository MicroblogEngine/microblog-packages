// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: proto/microblog/rpc/v1/messages/media.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "microblog.rpc.v1";

export interface Media {
  id: string;
  url: string;
  type: string;
}

export interface GetProfilesMediasRequest {
  type: string;
  ids: string[];
}

export interface GetProfilesMediasResponse {
  medias: Media[];
}

function createBaseMedia(): Media {
  return { id: "", url: "", type: "" };
}

export const Media: MessageFns<Media> = {
  encode(message: Media, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Media {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Media {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: Media): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(base?: DeepPartial<Media>): Media {
    return Media.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Media>): Media {
    const message = createBaseMedia();
    message.id = object.id ?? "";
    message.url = object.url ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseGetProfilesMediasRequest(): GetProfilesMediasRequest {
  return { type: "", ids: [] };
}

export const GetProfilesMediasRequest: MessageFns<GetProfilesMediasRequest> = {
  encode(message: GetProfilesMediasRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    for (const v of message.ids) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfilesMediasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfilesMediasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfilesMediasRequest {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetProfilesMediasRequest): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProfilesMediasRequest>): GetProfilesMediasRequest {
    return GetProfilesMediasRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProfilesMediasRequest>): GetProfilesMediasRequest {
    const message = createBaseGetProfilesMediasRequest();
    message.type = object.type ?? "";
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetProfilesMediasResponse(): GetProfilesMediasResponse {
  return { medias: [] };
}

export const GetProfilesMediasResponse: MessageFns<GetProfilesMediasResponse> = {
  encode(message: GetProfilesMediasResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.medias) {
      Media.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfilesMediasResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfilesMediasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.medias.push(Media.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfilesMediasResponse {
    return { medias: globalThis.Array.isArray(object?.medias) ? object.medias.map((e: any) => Media.fromJSON(e)) : [] };
  },

  toJSON(message: GetProfilesMediasResponse): unknown {
    const obj: any = {};
    if (message.medias?.length) {
      obj.medias = message.medias.map((e) => Media.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetProfilesMediasResponse>): GetProfilesMediasResponse {
    return GetProfilesMediasResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProfilesMediasResponse>): GetProfilesMediasResponse {
    const message = createBaseGetProfilesMediasResponse();
    message.medias = object.medias?.map((e) => Media.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
