// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: proto/microblog/rpc/v1/profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "microblog.rpc.v1";

export interface GetProfileByUserIdRequest {
  id: string;
}

export interface GetProfileByUserIdResponse {
  id: string;
  name: string;
  email: string;
  avatar: string;
}

export interface CreateProfileRequest {
  name: string;
  birthDate: string;
}

export interface CreateProfileResponse {
  id: string;
}

function createBaseGetProfileByUserIdRequest(): GetProfileByUserIdRequest {
  return { id: "" };
}

export const GetProfileByUserIdRequest: MessageFns<GetProfileByUserIdRequest> = {
  encode(message: GetProfileByUserIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileByUserIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileByUserIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileByUserIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetProfileByUserIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProfileByUserIdRequest>): GetProfileByUserIdRequest {
    return GetProfileByUserIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProfileByUserIdRequest>): GetProfileByUserIdRequest {
    const message = createBaseGetProfileByUserIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProfileByUserIdResponse(): GetProfileByUserIdResponse {
  return { id: "", name: "", email: "", avatar: "" };
}

export const GetProfileByUserIdResponse: MessageFns<GetProfileByUserIdResponse> = {
  encode(message: GetProfileByUserIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.avatar !== "") {
      writer.uint32(34).string(message.avatar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileByUserIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileByUserIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileByUserIdResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
    };
  },

  toJSON(message: GetProfileByUserIdResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProfileByUserIdResponse>): GetProfileByUserIdResponse {
    return GetProfileByUserIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProfileByUserIdResponse>): GetProfileByUserIdResponse {
    const message = createBaseGetProfileByUserIdResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.avatar = object.avatar ?? "";
    return message;
  },
};

function createBaseCreateProfileRequest(): CreateProfileRequest {
  return { name: "", birthDate: "" };
}

export const CreateProfileRequest: MessageFns<CreateProfileRequest> = {
  encode(message: CreateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.birthDate !== "") {
      writer.uint32(18).string(message.birthDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.birthDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      birthDate: isSet(object.birthDate) ? globalThis.String(object.birthDate) : "",
    };
  },

  toJSON(message: CreateProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.birthDate !== "") {
      obj.birthDate = message.birthDate;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProfileRequest>): CreateProfileRequest {
    return CreateProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProfileRequest>): CreateProfileRequest {
    const message = createBaseCreateProfileRequest();
    message.name = object.name ?? "";
    message.birthDate = object.birthDate ?? "";
    return message;
  },
};

function createBaseCreateProfileResponse(): CreateProfileResponse {
  return { id: "" };
}

export const CreateProfileResponse: MessageFns<CreateProfileResponse> = {
  encode(message: CreateProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateProfileResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProfileResponse>): CreateProfileResponse {
    return CreateProfileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProfileResponse>): CreateProfileResponse {
    const message = createBaseCreateProfileResponse();
    message.id = object.id ?? "";
    return message;
  },
};

export type ProfileServiceDefinition = typeof ProfileServiceDefinition;
export const ProfileServiceDefinition = {
  name: "ProfileService",
  fullName: "microblog.rpc.v1.ProfileService",
  methods: {
    getProfileByUserId: {
      name: "GetProfileByUserId",
      requestType: GetProfileByUserIdRequest,
      requestStream: false,
      responseType: GetProfileByUserIdResponse,
      responseStream: false,
      options: {},
    },
    createProfile: {
      name: "CreateProfile",
      requestType: CreateProfileRequest,
      requestStream: false,
      responseType: CreateProfileResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ProfileServiceImplementation<CallContextExt = {}> {
  getProfileByUserId(
    request: GetProfileByUserIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProfileByUserIdResponse>>;
  createProfile(
    request: CreateProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateProfileResponse>>;
}

export interface ProfileServiceClient<CallOptionsExt = {}> {
  getProfileByUserId(
    request: DeepPartial<GetProfileByUserIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProfileByUserIdResponse>;
  createProfile(
    request: DeepPartial<CreateProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateProfileResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
