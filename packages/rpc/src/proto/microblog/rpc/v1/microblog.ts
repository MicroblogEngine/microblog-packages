// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: proto/microblog/rpc/v1/microblog.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { PingRequest, PingResponse } from "./feed";
import { UnfollowRequest, UnfollowResponse } from "./follower";
import { FollowRequest, FollowResponse } from "./following";
import { GetProfilesMediasRequest, GetProfilesMediasResponse } from "./media";
import { NotifyRequest, NotifyResponse } from "./notification";
import {
  CreateProfileRequest,
  CreateProfileResponse,
  GetProfileByUserIdRequest,
  GetProfileByUserIdResponse,
} from "./profile";
import { SearchRequest, SearchResponse } from "./search";
import { GetUsersRequest, GetUsersResponse } from "./user";

export const protobufPackage = "microblog.rpc.v1";

export type UsersServiceDefinition = typeof UsersServiceDefinition;
export const UsersServiceDefinition = {
  name: "UsersService",
  fullName: "microblog.rpc.v1.UsersService",
  methods: {
    getUsers: {
      name: "GetUsers",
      requestType: GetUsersRequest,
      requestStream: false,
      responseType: GetUsersResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface UsersServiceImplementation<CallContextExt = {}> {
  getUsers(request: GetUsersRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetUsersResponse>>;
}

export interface UsersServiceClient<CallOptionsExt = {}> {
  getUsers(request: DeepPartial<GetUsersRequest>, options?: CallOptions & CallOptionsExt): Promise<GetUsersResponse>;
}

export type ProfilesServiceDefinition = typeof ProfilesServiceDefinition;
export const ProfilesServiceDefinition = {
  name: "ProfilesService",
  fullName: "microblog.rpc.v1.ProfilesService",
  methods: {
    getProfileByUserId: {
      name: "GetProfileByUserId",
      requestType: GetProfileByUserIdRequest,
      requestStream: false,
      responseType: GetProfileByUserIdResponse,
      responseStream: false,
      options: {},
    },
    createProfile: {
      name: "CreateProfile",
      requestType: CreateProfileRequest,
      requestStream: false,
      responseType: CreateProfileResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ProfilesServiceImplementation<CallContextExt = {}> {
  getProfileByUserId(
    request: GetProfileByUserIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProfileByUserIdResponse>>;
  createProfile(
    request: CreateProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateProfileResponse>>;
}

export interface ProfilesServiceClient<CallOptionsExt = {}> {
  getProfileByUserId(
    request: DeepPartial<GetProfileByUserIdRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProfileByUserIdResponse>;
  createProfile(
    request: DeepPartial<CreateProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateProfileResponse>;
}

export type FeedServiceDefinition = typeof FeedServiceDefinition;
export const FeedServiceDefinition = {
  name: "FeedService",
  fullName: "microblog.rpc.v1.FeedService",
  methods: {
    ping: {
      name: "Ping",
      requestType: PingRequest,
      requestStream: false,
      responseType: PingResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface FeedServiceImplementation<CallContextExt = {}> {
  ping(request: PingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PingResponse>>;
}

export interface FeedServiceClient<CallOptionsExt = {}> {
  ping(request: DeepPartial<PingRequest>, options?: CallOptions & CallOptionsExt): Promise<PingResponse>;
}

export type FollowerServiceDefinition = typeof FollowerServiceDefinition;
export const FollowerServiceDefinition = {
  name: "FollowerService",
  fullName: "microblog.rpc.v1.FollowerService",
  methods: {
    unfollow: {
      name: "Unfollow",
      requestType: UnfollowRequest,
      requestStream: false,
      responseType: UnfollowResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface FollowerServiceImplementation<CallContextExt = {}> {
  unfollow(request: UnfollowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UnfollowResponse>>;
}

export interface FollowerServiceClient<CallOptionsExt = {}> {
  unfollow(request: DeepPartial<UnfollowRequest>, options?: CallOptions & CallOptionsExt): Promise<UnfollowResponse>;
}

export type FollowingServiceDefinition = typeof FollowingServiceDefinition;
export const FollowingServiceDefinition = {
  name: "FollowingService",
  fullName: "microblog.rpc.v1.FollowingService",
  methods: {
    follow: {
      name: "Follow",
      requestType: FollowRequest,
      requestStream: false,
      responseType: FollowResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface FollowingServiceImplementation<CallContextExt = {}> {
  follow(request: FollowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<FollowResponse>>;
}

export interface FollowingServiceClient<CallOptionsExt = {}> {
  follow(request: DeepPartial<FollowRequest>, options?: CallOptions & CallOptionsExt): Promise<FollowResponse>;
}

export type NotificationServiceDefinition = typeof NotificationServiceDefinition;
export const NotificationServiceDefinition = {
  name: "NotificationService",
  fullName: "microblog.rpc.v1.NotificationService",
  methods: {
    notify: {
      name: "Notify",
      requestType: NotifyRequest,
      requestStream: false,
      responseType: NotifyResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface NotificationServiceImplementation<CallContextExt = {}> {
  notify(request: NotifyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NotifyResponse>>;
}

export interface NotificationServiceClient<CallOptionsExt = {}> {
  notify(request: DeepPartial<NotifyRequest>, options?: CallOptions & CallOptionsExt): Promise<NotifyResponse>;
}

export type MediasServiceDefinition = typeof MediasServiceDefinition;
export const MediasServiceDefinition = {
  name: "MediasService",
  fullName: "microblog.rpc.v1.MediasService",
  methods: {
    getProfilesMedias: {
      name: "GetProfilesMedias",
      requestType: GetProfilesMediasRequest,
      requestStream: false,
      responseType: GetProfilesMediasResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MediasServiceImplementation<CallContextExt = {}> {
  getProfilesMedias(
    request: GetProfilesMediasRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProfilesMediasResponse>>;
}

export interface MediasServiceClient<CallOptionsExt = {}> {
  getProfilesMedias(
    request: DeepPartial<GetProfilesMediasRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProfilesMediasResponse>;
}

export type SearchServiceDefinition = typeof SearchServiceDefinition;
export const SearchServiceDefinition = {
  name: "SearchService",
  fullName: "microblog.rpc.v1.SearchService",
  methods: {
    search: {
      name: "Search",
      requestType: SearchRequest,
      requestStream: false,
      responseType: SearchResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SearchServiceImplementation<CallContextExt = {}> {
  search(request: SearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SearchResponse>>;
}

export interface SearchServiceClient<CallOptionsExt = {}> {
  search(request: DeepPartial<SearchRequest>, options?: CallOptions & CallOptionsExt): Promise<SearchResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
